{
	"id": "6828bd10-40b7-4132-8f09-e9d5db53c412",
	"name": "finone_prd",
	"values": [
		{
			"key": "finone_url",
			"value": "https://api-stg.finan.one",
			"type": "default",
			"enabled": true
		},
		{
			"key": "SER-phone_number",
			"value": "+84327007119",
			"type": "default",
			"enabled": true
		},
		{
			"key": "SER-password",
			"value": "658969975cdd27957711aca7441cb6dfee716275b79fc2ee0a8953ea95f0bc713b4a",
			"type": "default",
			"enabled": true
		},
		{
			"key": "secret_key",
			"value": "b734fffd404307f94c3f8ff16c29f92c",
			"type": "default",
			"enabled": true
		},
		{
			"key": "SER-email",
			"value": "qctestapi.jPe5qkYmaY@finanteam.testinator.com",
			"type": "default",
			"enabled": true
		},
		{
			"key": "f1_open_url",
			"value": "https://stg-api.finan.one/open-api",
			"type": "default",
			"enabled": true
		},
		{
			"key": "list_common_func",
			"value": "utils = {\n    // ============================= random number between min and max\n    getRandomInt: function(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n    /**\n     *  =============================  func randNotDupe(min, max, total)\n     * total: số lượng random, ko dc nhỏ hơn max-min+1\n     * return: array\n     */\n    randNotDupe: function(min, max, total){\n        let arrNum = []; // new empty array\n        let n, p;\n        for (let i = 0; i < total; i++) {\n            do {\n            n = Math.floor(Math.random() * (max - min + 1)) + min;\n            p = arrNum.includes(n);\n            if(!p){\n                arrNum.push(n);\n            }\n            }\n            while(p);\n        }\n        return arrNum;\n    },\n    // ============================= random phone number\n    randomPhone: function() {\n        let phoneNumber = \"\";\n        let viettel = ['86','96','97','98','32','33','34','35','36','37','38','39'];\n        let vina = ['88','81','82','83','84','85','91','94'];\n        let mobi = ['89','90','93','70','76','77','78','79'];\n        let vinamobile = ['92','56','58'];\n        let gmobile = ['99','59'];\n        let itelecom = ['87'];\n        let phoneFormat = ['+84'];//'+84','0'\n        phoneNumber += phoneFormat[this.getRandomInt(0,phoneFormat.length - 1)];\n        let allNet = [...viettel,...vina,...mobi,...vinamobile,...gmobile,...itelecom];\n        phoneNumber += allNet[this.getRandomInt(0,allNet.length - 1)];\n        for(let i = 0; i < 7; i++){\n            phoneNumber += this.getRandomInt(0,9);\n        }\n        return phoneNumber;\n    },\n    // ============================= random characters\n    randomChars: function(length) {\n        var result           = '';\n        var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for ( var i = 0; i < length; i++ ) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    },\n    // ============================= random number\n    randomNumbers: function(length) {\n        var result           = '';\n        var characters       = '0123456789';\n        var charactersLength = characters.length;\n        for ( var i = 0; i < length; i++ ) {\n            result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        }\n        return result;\n    },\n    // ============================= get last day (Sun is end of Week)\n    getLastDayOfCurrentWeek: function() {\n        const now = new Date();\n        const lastDay = new Date(now);\n        const daysUntilSunday = 7 - now.getDay();  // if Saturday is end, change 7 => 6\n        lastDay.setDate(now.getDate() + daysUntilSunday);\n        return lastDay;\n    },\n    // ============================= get first day (Sun is end of Week)\n    getFirstDayOfCurrentWeek: function() {\n        const now = new Date();\n        const firstDay = new Date(now);\n        firstDay.setDate(now.getDate() - now.getDay() + 1);  // if Saturday is end, remove +1\n        return firstDay;\n    },\n    // ============================= get random day in current month\n    getRandomDayOfCurrentMonth: function() {\n        const now = new Date(); // Get the current date and time\n        const year = now.getFullYear(); // Get the current year\n        const month = now.getMonth(); // Get the current month (0-indexed)\n        const totalDays = new Date(year, month + 1, 0).getDate();\n        const randomDay = Math.floor(Math.random() * totalDays) + 1;\n        const randomDate = new Date(year, month, randomDay);\n        return randomDate;\n    },\n    // ============================= getFirstDayOfMonth\n    getFirstDayOfMonth: function(date_timestamp){\n        let setDate = new Date(date_timestamp*1000);\n        let getDate = new Date(setDate.getFullYear(), setDate.getMonth(), 1);\n        return getDate.toISOString();\n    },\n    // ============================= getLastDayOfMonth\n    getLastDayOfMonth: function(date_timestamp){\n        let setDate = new Date(date_timestamp*1000);\n        let firstDayOfNextMonth = new Date(setDate.getFullYear(), setDate.getMonth() + 1, 1);\n        let lastDayOfMonth = new Date(firstDayOfNextMonth - 1);\n        return lastDayOfMonth.toISOString();\n    },\n    // ============================= get random day in exchange month\n    getRandomDayOfExchangeMonth: function(exchange) {\n        const now = new Date(); // Get the current date and time\n        const year = now.getFullYear(); // Get the current year\n        const month = now.getMonth() + exchange; // Get the current month (0-indexed)\n        const totalDays = new Date(year, month + 1, 0).getDate();\n        const randomDay = Math.floor(Math.random() * totalDays) + 1;\n        const randomDate = new Date(year, month, randomDay);\n        return randomDate;\n    }\n}",
			"type": "any",
			"enabled": true
		},
		{
			"key": "C-configs",
			"value": "",
			"type": "any",
			"enabled": true
		},
		{
			"key": "C-payload",
			"value": "",
			"type": "any",
			"enabled": true
		},
		{
			"key": "X-testcase",
			"value": "",
			"type": "any",
			"enabled": true
		},
		{
			"key": "C-testcase",
			"value": "",
			"type": "any",
			"enabled": true
		}
	],
	"_postman_variable_scope": "environment",
	"_postman_exported_at": "2024-10-31T10:55:45.093Z",
	"_postman_exported_using": "Postman/11.5.1"
}